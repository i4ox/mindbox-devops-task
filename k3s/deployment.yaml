apiVersion: apps/v1
kind: Deployment
metadata:
  name: mindbox-application
spec:
  replicas: 4 # Начальное количество реплик. Нужно для отказоустойчивости.
  selector:
    matchLabels:
      app: mindbox-application # Метка, по которой selector будет искать поды
  template:
    metadata:
      labels:
        app: mindbox-application # Метка, которая присваивается созданным подам
    spec:
      affinity: # Я рассматривал в том числе вариант через topologySpreadConstraints, но там кроме maxSkew больше нету способ управление, что слишком урезано.
        podAffinity: # Отвечает за равномерное распределение под по зонам
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: topology.kubernetes.io/zone
              labelSelector:
                matchLabels:
                  app: mindbox-application
        nodeAffinity: # Отвечает за то на какиз узлах могут размещаться поды
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.kubernetes.io/zone
                    operator: In
                    values: # Указываем к каким зонам должны принадлежать узлы
                      - zone1
                      - zone2
                      - zone3
      containers:
        - name: mindbox-app # Чтобы не перепутать метку c названием контейнера делаю ее другой
          image: ollama/ollama:latest # Так как не было требований к образу, то пусть будет ollama
          readinessProbe:
            httpGet: # Проверяет доступность пода, чтобы решить направлять на него запросы или нет. Нужно для отказоустойчивости.
              path: /healtz
              port: 8080
            initialDelaySeconds: 5 # Первая попытка по истечению 5 секунд(минимальное время инициализации 5 секунд)
            periodSeconds: 5 # Повторная проверка доступности по истечению промежутка в 5 секунд
          resources:
            requests: # Ресурсы, которые выдаются гарантировано
              memory: "128Mi"
              cpu: "0.1" # По условию стабильно используются 0.1 от CPU
            limits: # Ресурсы, в пределах которых может работать под
              memory: "128Mi" # По условию 128Mi всегда достаточно
              cpu: "0.4" # По условию на момент запуска пода требуется чуть больше, чем 0.1. Пусть будет 0.4
          ports:
            - containerPort: 8080 # Открываем порт для обработки запросов
